#!/usr/bin/env bash
set -euo pipefail

# Configuration variables
DEFAULT_USER="participant"
SCRIPT_DIR="/usr/local/share/contest-manager"
RESTRICT_SCRIPT="$SCRIPT_DIR/restrict.sh"
UNRESTRICT_SCRIPT="$SCRIPT_DIR/unrestrict.sh"
SETUP_SCRIPT="$SCRIPT_DIR/setup.sh"
RESET_SCRIPT="$SCRIPT_DIR/reset.sh"
WHITELIST_CONFIG="/usr/local/etc/contest-restriction/allowed.txt"

# Check if running as root
check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "Error: This command must be run as root"
    exit 1
  fi
}

# Display usage information
show_usage() {
  cat << EOF
Usage: cmanager COMMAND [ARGS]

Contest Environment Manager

Commands:
  setup [USER]        Set up lab PC with all required software and user account (default: participant)
  reset [USER]        Reset user account to clean state (default: participant)
  restrict [USER]     Enable internet restrictions for specified user (default: participant)
  unrestrict [USER]   Disable internet restrictions for specified user
  add DOMAIN          Add domain to whitelist (e.g., example.com)
  remove DOMAIN       Remove domain from whitelist
  list                List currently whitelisted domains
  update              Update IP rules for all active restrictions
  status [USER]       Show current restriction status for specified user
  help                Show this help message

Examples:
  sudo cmanager setup                   # Set up lab PC from scratch for participant
  sudo cmanager setup contestant        # Set up lab PC for user "contestant"
  sudo cmanager reset                   # Reset participant account
  sudo cmanager reset contestant        # Reset contestant account
  sudo cmanager restrict                # Restrict default user (participant)
  sudo cmanager restrict contestant     # Restrict user "contestant"
  sudo cmanager add codeforces.com      # Add domain to whitelist
  sudo cmanager update                  # Update IP rules after adding domains

EOF
}

# Check if restrictions are active
check_status() {
  local user="${1:-$DEFAULT_USER}"
  local uid
  
  # Get UID of specified user
  if ! uid=$(id -u "$user" 2>/dev/null); then
    echo "Error: User '$user' does not exist"
    exit 1
  fi
  
  local is_restricted=false
  local service_status=""
  
  # Check if service is active
  if systemctl is-enabled "contest-restrict-$user.service" &>/dev/null; then
    service_status="enabled"
    is_restricted=true
  else
    service_status="disabled"
  fi
  
  # Check if iptables rules exist for the user
  local chain="CONTEST_${user^^}_OUT"
  local iptables_status=""
  if iptables -L "$chain" &>/dev/null; then
    iptables_status="active"
    is_restricted=true
  else
    iptables_status="inactive"
  fi
  
  echo "Status for user '$user':"
  echo "  Systemd service: $service_status"
  echo "  Firewall rules: $iptables_status"
  
  if $is_restricted; then
    echo "  Overall: RESTRICTIONS ACTIVE"
  else
    echo "  Overall: NO RESTRICTIONS"
  fi
  
  # Show whitelisted domains if restrictions are active
  if $is_restricted && [ -f "$WHITELIST_CONFIG" ]; then
    echo -e "\nWhitelisted domains:"
    grep -v "^#" "$WHITELIST_CONFIG" | grep -v "^$" | sort | sed 's/^/  /'
  fi
}

# List whitelisted domains
list_domains() {
  if [ ! -f "$WHITELIST_CONFIG" ]; then
    echo "Error: Whitelist file not found. Run 'sudo cmanager restrict' first."
    exit 1
  fi
  
  echo "Currently whitelisted domains:"
  grep -v "^#" "$WHITELIST_CONFIG" | grep -v "^$" | sort | sed 's/^/  /'
}

# Initialize whitelist file
init_whitelist() {
  mkdir -p "$(dirname "$WHITELIST_CONFIG")"
  if [ ! -f "$WHITELIST_CONFIG" ]; then
    cat > "$WHITELIST_CONFIG" << EOF
# Contest platforms and related domains
codeforces.com
codechef.com
vjudge.net
atcoder.jp
hackerrank.com
hackerearth.com
topcoder.com
spoj.com
lightoj.com
onlinejudge.org
cses.fi
bapsoj.com
toph.co
EOF
    echo "✅ Default whitelist created"
  fi
}

# Add domain to whitelist
add_domain() {
  local domain="$1"
  
  init_whitelist
  
  # Clean domain name
  domain="${domain#.}"
  domain="${domain#http://}"
  domain="${domain#https://}"
  domain="${domain%%/*}"
  
  if grep -q "^${domain}$" "$WHITELIST_CONFIG" 2>/dev/null; then
    echo "Domain $domain already in whitelist"
  else
    echo "$domain" >> "$WHITELIST_CONFIG"
    echo "✅ Added domain: $domain"
    echo "Run 'sudo cmanager update' to apply changes to active restrictions"
  fi
}

# Remove domain from whitelist
remove_domain() {
  local domain="$1"
  
  if [ ! -f "$WHITELIST_CONFIG" ]; then
    echo "Error: Whitelist file not found."
    exit 1
  fi
  
  # Clean domain name
  domain="${domain#.}"
  domain="${domain#http://}"
  domain="${domain#https://}"
  domain="${domain%%/*}"
  
  if grep -q "^${domain}$" "$WHITELIST_CONFIG" 2>/dev/null; then
    sed -i "/^${domain//\./\\.}$/d" "$WHITELIST_CONFIG"
    echo "✅ Removed domain: $domain"
    echo "Run 'sudo cmanager update' to apply changes to active restrictions"
  else
    echo "Domain $domain not found in whitelist"
  fi
}

# Update IP rules for all active restrictions
update_restrictions() {
  echo "Updating IP rules for all active restrictions..."
  
  # Find all active restriction services
  for service_file in /etc/systemd/system/contest-restrict-*.service; do
    if [ -f "$service_file" ]; then
      # Extract username from service filename
      service_name=$(basename "$service_file" .service)
      user="${service_name#contest-restrict-}"
      
      if systemctl is-enabled "$service_name" &>/dev/null; then
        echo "Updating restrictions for user: $user"
        if command -v update-contest-whitelist &>/dev/null; then
          update-contest-whitelist "$user"
        else
          echo "Warning: update-contest-whitelist script not found"
        fi
      fi
    fi
  done
  
  echo "✅ All active restrictions updated"
}

# Main script logic
main() {
  if [ $# -lt 1 ]; then
    show_usage
    exit 1
  fi

  case "$1" in
    setup)
      check_root
      user="${2:-$DEFAULT_USER}"
      SETUP_USER="$user" bash "$SETUP_SCRIPT"
      ;;
    reset)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESET_USER="$user" bash "$RESET_SCRIPT"
      ;;
    restrict)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESTRICT_USER="$user" bash "$RESTRICT_SCRIPT"
      ;;
    unrestrict)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESTRICT_USER="$user" bash "$UNRESTRICT_SCRIPT"
      ;;
    add)
      check_root
      if [ $# -ne 2 ]; then
        echo "Error: Missing domain name"
        echo "Usage: sudo cmanager add example.com"
        exit 1
      fi
      add_domain "$2"
      ;;
    remove)
      check_root
      if [ $# -ne 2 ]; then
        echo "Error: Missing domain name"
        echo "Usage: sudo cmanager remove example.com"
        exit 1
      fi
      remove_domain "$2"
      ;;
    list)
      list_domains
      ;;
    update)
      check_root
      update_restrictions
      ;;
    status)
      user="${2:-$DEFAULT_USER}"
      check_status "$user"
      ;;
    help)
      show_usage
      ;;
    *)
      echo "Error: Unknown command '$1'"
      show_usage
      exit 1
      ;;
  esac
}

main "$@"
