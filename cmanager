#!/usr/bin/env bash
set -euo pipefail

# Configuration variables
DEFAULT_USER="participant"
SCRIPT_DIR="/usr/local/share/contest-manager"
RESTRICT_SCRIPT="$SCRIPT_DIR/restrict.sh"
UNRESTRICT_SCRIPT="$SCRIPT_DIR/unrestrict.sh"
SETUP_SCRIPT="$SCRIPT_DIR/setup.sh"
RESET_SCRIPT="$SCRIPT_DIR/reset.sh"
DISCOVER_SCRIPT="$SCRIPT_DIR/discover-dependencies.sh"

# Check if running as root
check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "Error: This command must be run as root"
    exit 1
  fi
}

# Display usage information
show_usage() {
  cat << EOF
Usage: cmanager COMMAND [ARGS]

Contest Environment Manager - Minimal Command Dispatcher

Commands:
  setup [USER]        Set up lab PC with all required software and user account (default: participant)
  reset [USER]        Reset user account to clean state (default: participant)
  restrict [USER]     Enable internet restrictions for specified user (default: participant)
  unrestrict [USER]   Disable internet restrictions for specified user
  discover            Discover external dependencies for whitelisted contest sites
  dependencies        Show discovered external dependencies for contest sites
  status [USER]       Show current restriction status for specified user
  list                List currently whitelisted domains
  add DOMAIN          Add domain to whitelist
  remove DOMAIN       Remove domain from whitelist
  help                Show this help message

Examples:
  sudo cmanager setup                   # Set up lab PC from scratch for participant
  sudo cmanager setup contestant        # Set up lab PC for user "contestant"
  sudo cmanager reset                   # Reset participant account
  sudo cmanager reset contestant        # Reset contestant account
  sudo cmanager restrict                # Restrict default user (participant)
  sudo cmanager restrict contestant     # Restrict user "contestant"
  sudo cmanager discover                # Discover dependencies for contest sites
  sudo cmanager dependencies            # Show discovered dependencies
  sudo cmanager status                  # Check status for participant
  sudo cmanager list                    # List whitelisted domains
  sudo cmanager add codeforces.com      # Add domain to whitelist
  sudo cmanager remove facebook.com     # Remove domain from whitelist

EOF
}

# Configuration
WHITELIST_CONFIG="/usr/local/etc/contest-restriction/whitelist.txt"
# This file will be created/used by install.sh and managed by cmanager commands.

# Check status of user restrictions
check_status() {
  local user="${1:-$DEFAULT_USER}"

  # Check if user exists
  if ! id "$user" &>/dev/null; then
    echo "Error: User '$user' does not exist"
    exit 1
  fi

  echo "Status for user '$user':"

  # Check systemd service
  local service_name="contest-restrict-$user.service"
  if systemctl is-enabled "$service_name" &>/dev/null; then
    echo "  Service: enabled and active"
  else
    echo "  Service: disabled"
  fi

  # Check iptables rules
  local chain="CONTEST_${user^^}_OUT"
  if iptables -L "$chain" &>/dev/null 2>&1; then
    echo "  Firewall: active"
  else
    echo "  Firewall: inactive"
  fi

  # Show whitelisted domains if available
  if [ -f "$WHITELIST_CONFIG" ]; then
    echo -e "\nWhitelisted domains:"
    grep -v "^#" "$WHITELIST_CONFIG" | grep -v "^$" | sort | sed 's/^/  /'
  else
    echo -e "\nNo whitelist found"
  fi
}

# List whitelisted domains
list_domains() {
  if [ -f "$WHITELIST_CONFIG" ]; then
    echo "Currently whitelisted domains:"
    grep -v "^#" "$WHITELIST_CONFIG" | grep -v "^$" | sort | sed 's/^/  /'
  elif [ -f "whitelist.txt" ]; then
    echo "Local whitelist.txt contents:"
    grep -v "^#" "whitelist.txt" | grep -v "^$" | sort | sed 's/^/  /'
  else
    echo "No whitelist found. Create a whitelist.txt file or run 'sudo cmanager restrict' first."
  fi
}

# Add domain to whitelist
add_domain() {
  local domain="$1"

  # Clean domain name
  domain="${domain#.}"
  domain="${domain#http://}"
  domain="${domain#https://}"
  domain="${domain%%/*}"

  # Create config directory if needed
  mkdir -p "$(dirname "$WHITELIST_CONFIG")"

  # Initialize whitelist if it doesn't exist
  if [ ! -f "$WHITELIST_CONFIG" ]; then
    if [ -f "whitelist.txt" ]; then
      echo "Creating system whitelist from local whitelist.txt"
      cp "whitelist.txt" "$WHITELIST_CONFIG"
    else
      touch "$WHITELIST_CONFIG"
    fi
  fi

  # Check if domain already exists
  if grep -q "^${domain}$" "$WHITELIST_CONFIG" 2>/dev/null; then
    echo "Domain $domain already in whitelist"
  else
    echo "$domain" >> "$WHITELIST_CONFIG"
    echo "✅ Added domain: $domain"
    echo "Run 'sudo cmanager restrict' to apply changes to active restrictions"
  fi
}

# Remove domain from whitelist
remove_domain() {
  local domain="$1"

  # Clean domain name
  domain="${domain#.}"
  domain="${domain#http://}"
  domain="${domain#https://}"
  domain="${domain%%/*}"

  if [ ! -f "$WHITELIST_CONFIG" ]; then
    echo "Error: Whitelist file not found at $WHITELIST_CONFIG"
    exit 1
  fi

  if grep -q "^${domain}$" "$WHITELIST_CONFIG" 2>/dev/null; then
    sed -i "/^${domain//\./\\.}$/d" "$WHITELIST_CONFIG"
    echo "✅ Removed domain: $domain"
    echo "Run 'sudo cmanager restrict' to apply changes to active restrictions"
  else
    echo "Domain $domain not found in whitelist"
  fi
}

# Display discovered dependencies
show_dependencies() {
  local dependencies_file="/usr/local/etc/contest-restriction/dependencies.txt"

  if [ -f "$dependencies_file" ]; then
    echo "Discovered dependencies for contest sites:"

    # Count domains
    local count=$(grep -c -v "^[[:space:]]*#\|^[[:space:]]*$" "$dependencies_file" 2>/dev/null || echo "0")

    if [ "$count" -gt 0 ]; then
      # Display domains with numbers
      echo "Found $count external dependencies:"
      grep -v "^[[:space:]]*#\|^[[:space:]]*$" "$dependencies_file" | sort | awk '{print "  " NR ". " $0}'
    else
      echo "No dependencies found. Run 'sudo cmanager discover' to discover dependencies."
    fi
  else
    echo "No dependencies file found at $dependencies_file"
    echo "Run 'sudo cmanager discover' to discover dependencies."
  fi
}

# Main script logic
main() {
  if [ $# -lt 1 ]; then
    show_usage
    exit 1
  fi

  case "$1" in
    setup)
      check_root
      user="${2:-$DEFAULT_USER}"
      SETUP_USER="$user" bash "$SETUP_SCRIPT"
      ;;
    reset)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESET_USER="$user" bash "$RESET_SCRIPT"
      ;;
    restrict)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESTRICT_USER="$user" bash "$RESTRICT_SCRIPT"
      ;;
    unrestrict)
      check_root
      user="${2:-$DEFAULT_USER}"
      RESTRICT_USER="$user" bash "$UNRESTRICT_SCRIPT"
      ;;
    discover)
      check_root
      bash "$DISCOVER_SCRIPT"
      ;;
    dependencies)
      show_dependencies
      ;;
    status)
      user="${2:-$DEFAULT_USER}"
      check_status "$user"
      ;;
    list)
      list_domains
      ;;
    add)
      check_root
      if [ $# -ne 2 ]; then
        echo "Error: Missing domain name"
        echo "Usage: sudo cmanager add example.com"
        exit 1
      fi
      add_domain "$2"
      ;;
    remove)
      check_root
      if [ $# -ne 2 ]; then
        echo "Error: Missing domain name"
        echo "Usage: sudo cmanager remove example.com"
        exit 1
      fi
      remove_domain "$2"
      ;;
    help)
      show_usage
      ;;
    *)
      echo "Error: Unknown command '$1'"
      show_usage
      exit 1
      ;;
  esac
}

main "$@"
